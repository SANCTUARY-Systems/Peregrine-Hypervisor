# Copyright 2018 The Hafnium Authors.
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/BSD-3-Clause.

import("//build/image/image.gni")
import("//build/toolchain/platform.gni")

declare_args() {
  # Target which implements the standard output interface.
  stdout = ":stdout"
}

# The hypervisor image.
hypervisor("peregrine") {
  deps = [
    ":layout",
    ":src_not_testable_yet",
  ]
}

# Hypervisor specific code that isn't. One day it will be testable and both the
# src targets will merge!
source_set("src_not_testable_yet") {
  public_configs = [ "//src/arch/${plat_arch}:arch_config" ]
  sources = [
    "cpio.c",
    "init.c",
    "load.c",
    "main.c",
  ]
  deps = [
    ":proprietary",
    ":error",
    ":src_testable",
    "//project/${project}/${plat_name}",
    "//src/arch/${plat_arch}/hypervisor:vm",
    plat_boot_flow,
    plat_console,
    plat_iommu,
  ]
}

source_set("proprietary") {
  public_configs = [ "//src/arch/${plat_arch}:arch_config" ]
  if (defined(plat_proprietary) && plat_proprietary != "") {
    deps = [
        plat_proprietary
      ]
  }
}

# One day, this will contain all the hypervisor's source but only once it can
# all be built against the fake arch for unit tests. Utilities that are shared
# e.g. with VM used in the VM tests have their own targets to facilitate
# sharing.
source_set("src_testable") {
  public_configs = [ "//src/arch/${plat_arch}:arch_config" ]
  sources = [
    "api.c",
    "cpu.c",
    "manifest_util.c",
    "manifest.c",
    "vcpu.c",
  ]

  deps = [
    ":error",
    ":dlog",
    ":fdt",
    ":fdt_handler",
    ":memiter",
    ":mm",
    ":panic",
    ":uuid",
    ":std",
    ":vm",
    "//src/arch/${plat_arch}:arch",
    "//src/arch/${plat_arch}:src_testable",
    "//src/arch/${plat_arch}/hypervisor:vm",
    "//vmlib",
    plat_boot_flow,
    plat_console,
    plat_iommu,
  ]
}

source_set("layout") {
  sources = [
    "layout.c",
  ]
}

source_set("mm") {
  sources = [
    "mm.c",
    "mpool.c",
    "pma.c"
  ]
}

source_set("vm") {
  public_configs = [ "//src/arch/${plat_arch}:arch_config" ]
  sources = [
    "vm.c",
  ]
}

# Standard library functions.
source_set("std") {
  sources = [
    "std.c",
  ]

  deps = [
    #"//src/arch/${plat_arch}:std",
    "//src/arch/aarch64:std",
  ]
}

# Default implementation of stdout which sends the character to the
# 'plat_console' driver.
source_set("stdout") {
  sources = [
    "stdout.c",
  ]
  deps = [
    plat_console,
  ]
}

# Debug code that is not specific to a certain image so can be shared.
source_set("dlog") {
  sources = [
    "dlog.c",
  ]

  deps = [
    ":std",
    stdout,
  ]
}

source_set("string") {
  sources = [
    "string.c",
  ]
  deps = [
    ":memiter",
    ":std",
  ]
}

source_set("fdt_handler") {
  sources = [
    "fdt_handler.c",
  ]
  deps = [
    ":dlog",
    ":fdt"
  ]
}

# Flattened Device Tree (FDT) utilities.
source_set("fdt") {
  sources = [
    "fdt.c",
  ]

  deps = [
    ":memiter",
    ":string",
    "//third_party/dtc:libfdt",
  ]
}

source_set("memiter") {
  sources = [
    "memiter.c",
  ]
}

source_set("panic") {
  sources = [
    "panic.c",
  ]
}

source_set("abort") {
  sources = [
    "abort.c",
  ]
}

source_set("uuid") {
  sources = [
    "uuid.c",
  ]
}

source_set("error") {
  sources = [
    "error.c",
  ]
  deps = [
    ":dlog",
    ":abort",
  ]
}

source_set("src_unit_tests") {
  testonly = true
  public_configs = [ "//src/arch/${plat_arch}:arch_config" ]
  
  if (defined(plat_proprietary_unit) && plat_proprietary_unit != "") {
    deps = [plat_proprietary_unit]
  }
}

executable("unit_tests") {
  testonly = true
  sources = [
    "fdt_handler_test.cc",
    "fdt_test.cc",
    "mm_test.cc",
    "mpool_test.cc",
    "pma_test.cc",
    "string_test.cc",
    "std_test.cc",
    "uuid_test.cc",
    "vm_test.cc"
  ]

  sources += [ "layout_fake.c" ]
  cflags_cc = [
    "-Wno-c99-extensions",
    "-Wno-nested-anon-types",
  ]
  ldflags = [ "-flto" ]
  deps = [
    ":src_unit_tests",
    ":src_testable",
    "//third_party/googletest:gtest_main",
  ]
}
