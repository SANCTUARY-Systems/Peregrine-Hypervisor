# Copyright (c) 2023 SANCTUARY Systems GmbH
#
# This file is free software: you may copy, redistribute and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 2 of the License, or (at your
# option) any later version.
#
# This file is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# For a commercial license, please contact SANCTUARY Systems GmbH
# directly at info@sanctuary.dev
#
# This file incorporates work covered by the following copyright and
# permission notice:
#
#     Copyright 2018 The Hafnium Authors.
#
#     Use of this source code is governed by a BSD-style
#     license that can be found in the LICENSE file or at
#     https://opensource.org/licenses/BSD-3-Clause.

# Configuration of the build toolchain.
declare_args() {
  # The name of the project being built.
  project = "peregrine"

  # This default path is overriden from the Makefile based on
  # the toolchain_lib arg passed through gn.
  toolchain_lib = rebase_path("//prebuilts/linux-x64/clang/lib64/clang/12.0.5/")

  use_prebuilt = false

  # Whether to build against the platform for embedded images consisting of
  # include paths and defines. This is also used for host targets that simulate
  # an embedded image.
  use_platform = false

  # The level of debug logs to include. This should match one of the levels
  # defined in dlog.h.
  log_level = "LOG_LEVEL_INFO"
}

# Check that we support the attempted build.
assert(host_os == "linux", "Only linux builds are currently supported.")

# Setup the standard variables.
if (target_os == "") {
  target_os = host_os
}
if (target_cpu == "") {
  target_cpu = host_cpu
}
if (current_os == "") {
  current_os = target_os
}
if (current_cpu == "") {
  current_cpu = target_cpu
}

assert(target_os == host_os, "Cross compiles not yet supported.")
assert(target_cpu == host_cpu, "Cross compiles not yet supported.")

# All binary targets will get this list of configs by default.
_shared_binary_target_configs = [ "//build:compiler_defaults" ]

# If it's not building a host utility, it's building against the platform so apply the configuration.
if (use_platform) {
  _shared_binary_target_configs += [ "//build:platform" ]
}

# Apply that default list to the binary target types.
set_defaults("executable") {
  configs = _shared_binary_target_configs
}
set_defaults("static_library") {
  configs = _shared_binary_target_configs
}
set_defaults("shared_library") {
  configs = _shared_binary_target_configs
}
set_defaults("source_set") {
  configs = _shared_binary_target_configs
}

# The default toolchain is the target toolchain for building utilities and tests.
set_default_toolchain("//build/toolchain:host_clang")
