# Copyright (c) 2023 SANCTUARY Systems GmbH
#
# This file is free software: you may copy, redistribute and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 2 of the License, or (at your
# option) any later version.
#
# This file is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# For a commercial license, please contact SANCTUARY Systems GmbH
# directly at info@sanctuary.dev
#
# This file incorporates work covered by the following copyright and
# permission notice:
#
#     Copyright 2018 The Hafnium Authors.
#
#     Use of this source code is governed by a BSD-style
#     license that can be found in the LICENSE file or at
#     https://opensource.org/licenses/BSD-3-Clause.

import("//build/toolchain/platform.gni")

# default to DEBUG configuration
optimization_mode = "-O0"

debug_mode = "-g"

release_mode = 0

measured_boot = 0

measured_boot_env = getenv("MEASURED_BOOT")

if (measured_boot_env == "y") {
  measured_boot = 1
}

log_level = getenv("LOG_LEVEL")

max_cpus = 1
max_cpus_in = getenv("MAX_CPUS")

if (max_cpus_in != "") {
  max_cpus = max_cpus_in
}

max_vms = 1
max_vms_in = getenv("MAX_VMS")

if (max_vms_in != "") {
  max_vms = max_vms_in
}

# set a default log level if it isn't specified
if (log_level == "") {
  log_level = "LOG_LEVEL_INFO"
}
    
# check if RELEASE configuration and adapt variables
target_config = getenv("TARGET_CONFIG")

if (target_config == "RELEASE") {
    optimization_mode = "-O2"
    debug_mode = ""
    release_mode = 1
}

# Default language and error reporting configuration.
config("compiler_defaults") {
  cflags = [
    debug_mode,
    "-Wall",
    optimization_mode,

    "-flto",
    "-fsanitize=cfi-icall",
    "-fstack-protector-all"
  ]

  cflags_c = [ "-std=c11" ]

  cflags_cc = [ "-std=c++2a" ]
}

# Platform configuration.
config("platform") {
  include_dirs = [
    "//inc",
    "//inc/vmapi",
    "//src/arch/${plat_arch}/inc",
    # Auto-generated headers using the 'offset_size_header' build rule.
    "${root_gen_dir}/offset_size_header",
    "//src/proprietary/inc"
  ]

  defines = [
    "HEAP_PAGES=${plat_heap_pages}",
    "HOST_TESTING_MODE=${plat_test_mode}",
    "MAX_CPUS=${max_cpus}",
    "MAX_VMS=${max_vms}",
    "LOG_LEVEL=${log_level}",
    "RELEASE=${release_mode}",
    "MEASURED_BOOT=${measured_boot}"
  ]
}
