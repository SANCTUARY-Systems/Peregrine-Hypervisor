# Copyright (c) 2023 SANCTUARY Systems GmbH
#
# This file is free software: you may copy, redistribute and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 2 of the License, or (at your
# option) any later version.
#
# This file is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# For a commercial license, please contact SANCTUARY Systems GmbH
# directly at info@sanctuary.dev
#
# This file incorporates work covered by the following copyright and
# permission notice:
#
#     Copyright 2018 The Hafnium Authors.
#
#     Use of this source code is governed by a BSD-style
#     license that can be found in the LICENSE file or at
#     https://opensource.org/licenses/BSD-3-Clause.

declare_args() {
  # Set by arch toolchain. Prefix for binutils tools.
  tool_prefix = ""

  # Enable link time optimizations
  use_lto = true
}

# Template for embedded toolchains; there is no support for C++ or libraries.
# Instead, use source_set to group source together.
template("embedded_cc_toolchain") {
  toolchain(target_name) {
    assert(defined(invoker.cc), "\"cc\" must be defined for ${target_name}.")
    assert(defined(invoker.ld), "\"ld\" must be defined for ${target_name}.")

    # Collect extra flags from the toolchain.
    extra_defines = ""
    extra_cflags = "-ffunction-sections -fdata-sections"
    if (use_lto) {
      extra_cflags += " -flto"
    }
    extra_ldflags = "-pie --gc-sections"

    if (defined(invoker.extra_defines)) {
      extra_defines += " ${invoker.extra_defines}"
    }
    if (defined(invoker.extra_cflags)) {
      extra_cflags += " ${invoker.extra_cflags}"
    }
    if (defined(invoker.extra_ldflags)) {
      extra_ldflags += " ${invoker.extra_ldflags}"
    }

    # Define the tools.
    tool("cc") {
      depfile = "{{output}}.d"
      command = "${invoker.cc} -MMD -MF $depfile ${extra_defines} {{defines}} {{include_dirs}} ${extra_cflags} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC {{output}}"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
      ]
    }

    tool("asm") {
      depfile = "{{output}}.d"
      command = "${invoker.cc} -MMD -MF $depfile ${extra_defines} {{defines}} {{include_dirs}} ${extra_cflags} {{asmflags}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "ASM {{output}}"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
      ]
    }

    tool("link") {
      outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
      rspfile = "$outfile.rsp"
      command = "${invoker.ld} ${extra_ldflags} {{ldflags}} -o $outfile --start-group @$rspfile --end-group"
      description = "LINK $outfile"
      default_output_dir = "{{root_out_dir}}"
      rspfile_content = "{{inputs}}"
      outputs = [
        outfile,
      ]
    }

    tool("alink") {
      outfile = "{{target_out_dir}}/{{target_output_name}}.a"
      command = "rm -f $outfile && ${invoker.ar} -rc $outfile {{inputs}}"
      description = "ALINK $outfile"
      outputs = [
        outfile,
      ]
    }

    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }

    tool("copy") {
      command = "cp -af {{source}} {{output}}"
      description = "COPY {{source}} {{output}}"
    }

    toolchain_args = {
      forward_variables_from(invoker.toolchain_args, "*")
    }
  }
}

# Specialize for clang.
template("embedded_clang_toolchain") {
  assert(defined(invoker.target),
         "\"target\" must be defined for ${target_name}.")
  assert(defined(invoker.extra_defines),
         "\"extra_defines\" must be defined for ${target_name}")
  assert(defined(invoker.extra_cflags),
         "\"extra_cflags\" must be defined for ${target_name}")
  assert(defined(invoker.extra_ldflags),
         "\"extra_ldflags\" must be defined for ${target_name}")

  embedded_cc_toolchain(target_name) {
    cc = "clang"
    ld = "ld.lld"
    ar = "llvm-ar"

    forward_variables_from(invoker,
                           [
                             "extra_defines",
                             "extra_cflags",
                             "extra_ldflags"
                           ])

    # TODO: Remove //inc/system if we can stop using the version of stdatomic.h
    # from the Android prebuilt Clang.
    extra_cflags += " -target ${invoker.target} -fcolor-diagnostics" +
                    " -isystem " + rebase_path("${toolchain_lib}/include")
    if (use_prebuilt == true) {
      extra_cflags += " -nostdinc -isystem " + rebase_path("//inc/system")
    } else {
      ld = "ld.lld-10"
    }

    extra_ldflags += " -O2 --icf=all --fatal-warnings --color-diagnostics"

    toolchain_args = {
      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args, "*")
      }
    }
  }
}

# Specialize for mixed toolchain with clang and bfd linker.
template("embedded_clang_bfd_toolchain") {
  assert(defined(invoker.target),
         "\"target\" must be defined for ${target_name}.")
  assert(defined(invoker.tool_prefix),
         "\"tool_prefix\" must be defined for ${target_name}.")
  assert(defined(invoker.extra_defines),
         "\"extra_defines\" must be defined for ${target_name}")
  assert(defined(invoker.extra_cflags),
         "\"extra_cflags\" must be defined for ${target_name}")
  assert(defined(invoker.extra_ldflags),
         "\"extra_ldflags\" must be defined for ${target_name}")

  embedded_cc_toolchain(target_name) {
    cc = "clang"
    ld = "${invoker.tool_prefix}ld.bfd"
    ar = "llvm-ar"

    forward_variables_from(invoker,
                           [
                             "extra_defines",
                             "extra_cflags",
                             "extra_ldflags",
                           ])
    extra_cflags += " -target ${invoker.target} -fcolor-diagnostics"
    extra_ldflags += " --fatal-warnings"
    if (use_lto) {
      extra_ldflags += " -O2 --icf=all"
    }

    toolchain_args = {
      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args, "*")
      }
    }
  }
}

# Expand to clang variants.
template("embedded_platform_toolchain") {
  assert(defined(invoker.arch), "\"arch\" must be defined for ${target_name}.")
  assert(defined(invoker.target),
         "\"target\" must be defined for ${target_name}.")
  assert(defined(invoker.tool_prefix),
         "\"tool_prefix\" must be defined for ${target_name}.")
  assert(defined(invoker.origin_address),
         "\"origin_address\" must be defined for ${target_name}.")
  assert(defined(invoker.heap_pages),
         "\"heap_pages\" must be defined for ${target_name}.")
  assert(defined(invoker.platform_name),
         "\"platform_name\" must be defined for ${target_name}.")

  extra_defines = ""
  extra_cflags = "-fno-builtin -ffreestanding -fpic"
  extra_ldflags = "--defsym=ORIGIN_ADDRESS=${invoker.origin_address}"
  if (defined(invoker.extra_defines)) {
    extra_defines += " ${invoker.extra_defines}"
  }
  if (defined(invoker.extra_cflags)) {
    extra_cflags += " ${invoker.extra_cflags}"
  }
  if (defined(invoker.extra_ldflags)) {
    extra_ldflags += " ${invoker.extra_ldflags}"
  }
  toolchain_args = {
    use_platform = true
    plat_name = invoker.platform_name
    plat_arch = invoker.arch
    plat_heap_pages = invoker.heap_pages
    if (defined(invoker.test_mode)) {
      plat_test_mode = invoker.test_mode
    }
    if (defined(invoker.toolchain_args)) {
      forward_variables_from(invoker.toolchain_args, "*")
    }
  }

  embedded_clang_toolchain("${target_name}_clang") {
    target = invoker.target
  }

  embedded_clang_bfd_toolchain("${target_name}_clang_bfd") {
    target = invoker.target
    tool_prefix = invoker.tool_prefix
  }
}

# Specialize for different architectures.

template("aarch64_common_toolchain") {
  assert(defined(invoker.cpu), "\"cpu\" must be defined for ${target_name}.")
  assert(defined(invoker.target),
         "\"target\" must be defined for ${target_name}")
  assert(defined(invoker.tool_prefix),
         "\"tool_prefix\" must be defined for ${target_name}")
  assert(defined(invoker.origin_address),
         "\"origin_address\" must be defined for ${target_name}.")
  assert(defined(invoker.phys_start_addr),
         "\"phys_start_addr\" must be defined for ${target_name}.")
  assert(defined(invoker.phys_mem_size),
         "\"phys_mem_size\" must be defined for ${target_name}.")
  assert(defined(invoker.console),
         "\"console\" must be defined for ${target_name}.")
  assert(defined(invoker.heap_pages),
         "\"heap_pages\" must be defined for ${target_name}.")
  assert(defined(invoker.uart_base_address),
         "\"uart_base_address\" must be defined for ${target_name}.")
  if (invoker.gic_version == 3 || invoker.gic_version == 4) {
    assert(defined(invoker.gic_start),
           "\"gic_start\" must be defined for ${target_name}.")
    assert(defined(invoker.gic_end),
           "\"gic_end\" must be defined for ${target_name}.")
    assert(defined(invoker.gicd_base_address),
           "\"gicd_base_address\" must be defined for ${target_name}.")
    assert(defined(invoker.gicd_size),
           "\"gicd_size\" must be defined for ${target_name}.")
    assert(defined(invoker.gicr_base_address),
           "\"gicr_base_address\" must be defined for ${target_name}.")
    assert(defined(invoker.gicr_size),
           "\"gicr_size\" must be defined for ${target_name}.")
  }
  assert(defined(invoker.platform_name),
         "\"platform_name\" must be defined for ${target_name}.")

  embedded_platform_toolchain(target_name) {
    forward_variables_from(invoker,
                           [
                             "origin_address",
                             "heap_pages",
                             "platform_name",
                             "extra_ldflags",
                             "test_mode",
                           ])
    arch = "aarch64"
    target = invoker.target
    tool_prefix = invoker.tool_prefix
    extra_cflags = "-mcpu=${invoker.cpu} -mstrict-align"
    if (defined(invoker.extra_cflags)) {
      extra_cflags += " ${invoker.extra_cflags}"
    }

    extra_defines = ""
    if (defined(invoker.extra_defines)) {
      extra_defines += " ${invoker.extra_defines}"
    }

    extra_defines += " -DPHYS_START_ADDR=${invoker.phys_start_addr}"
    extra_defines += " -DPHYS_MEM_SIZE=${invoker.phys_mem_size}"

    extra_defines += " -DUART_BASE=${invoker.uart_base_address}"

    if (invoker.gic_version > 0) {
      extra_defines += " -DGIC_VERSION=${invoker.gic_version}"
    }

    if (invoker.gic_version == 3 || invoker.gic_version == 4) {
      # GIC_{START,END} needed for mapping GIC to hypervisor
      extra_defines += " -DGIC_START=${invoker.gic_start}"
      extra_defines += " -DGIC_END=${invoker.gic_end}"

      # GICD & GICR should always be defined
      extra_defines += " -DGICD_BASE=${invoker.gicd_base_address}"
      extra_defines += " -DGICD_SIZE=${invoker.gicd_size}"
      extra_defines += " -DGICR_BASE=${invoker.gicr_base_address}"
      extra_defines += " -DGICR_SIZE=${invoker.gicr_size}"

      # GIC extensions (all optional)
      if (defined(invoker.gicc_base_address)
      &&  defined(invoker.gicc_size))
      {
        extra_defines += " -DGICC_BASE=${invoker.gicc_base_address}"
        extra_defines += " -DGICC_SIZE=${invoker.gicc_size}"
      }

      if (defined(invoker.gich_base_address)
      &&  defined(invoker.gich_size))
      {
        extra_defines += " -DGICH_BASE=${invoker.gich_base_address}"
        extra_defines += " -DGICH_SIZE=${invoker.gich_size}"
      }

      if (defined(invoker.gicv_base_address)
      &&  defined(invoker.gicv_size))
      {
        extra_defines += " -DGICV_BASE=${invoker.gicv_base_address}"
        extra_defines += " -DGICV_SIZE=${invoker.gicv_size}"
      }

      if (defined(invoker.gits_base_address)
      &&  defined(invoker.gits_size))
      {
        extra_defines += " -DGITS_BASE=${invoker.gits_base_address}"
        extra_defines += " -DGITS_SIZE=${invoker.gits_size}"
      }
    }

    # sanctuary virtual uart devices
    if (defined(invoker.sanct_uart_base)
    &&  defined(invoker.sanct_uart_size)
    &&  defined(invoker.sanct_uart_devs))
    {
        extra_defines += " -DV_SANCT_UART_BASE=${invoker.sanct_uart_base}"
        extra_defines += " -DV_SANCT_UART_SIZE=${invoker.sanct_uart_size}"
        extra_defines += " -DV_SANCT_UART_DEVS=${invoker.sanct_uart_devs}"
    }

    # imx uart virtual devices
    if (defined(invoker.imx_uart_base)
    &&  defined(invoker.imx_uart_size)
    &&  defined(invoker.imx_uart_devs))
    {
        extra_defines += " -DV_IMX_UART_BASE=${invoker.imx_uart_base}"
        extra_defines += " -DV_IMX_UART_SIZE=${invoker.imx_uart_size}"
        extra_defines += " -DV_IMX_UART_DEVS=${invoker.imx_uart_devs}"
    }
    if (defined(invoker.imx_uart_dirmap)) {
        extra_defines += " -DV_IMX_UART_DIRMAP=${invoker.imx_uart_dirmap}"
    }

    # anatop virtual devices
    if (defined(invoker.anatop_base)
    &&  defined(invoker.anatop_size)
    &&  defined(invoker.anatop_devs))
    {
        extra_defines += " -DV_ANATOP_BASE=${invoker.anatop_base}"
        extra_defines += " -DV_ANATOP_SIZE=${invoker.anatop_size}"
        extra_defines += " -DV_ANATOP_DEVS=${invoker.anatop_devs}"

    }
    if (defined(invoker.anatop_dirmap)) {
        extra_defines += " -DV_ANATOP_DIRMAP=${invoker.anatop_dirmap}"
    }

    # clock controller virtual devices
    if (defined(invoker.clock_ctrl_base)
    &&  defined(invoker.clock_ctrl_size)
    &&  defined(invoker.clock_ctrl_devs))
    {
        extra_defines += " -DV_CLOCK_CTRL_BASE=${invoker.clock_ctrl_base}"
        extra_defines += " -DV_CLOCK_CTRL_SIZE=${invoker.clock_ctrl_size}"
        extra_defines += " -DV_CLOCK_CTRL_DEVS=${invoker.clock_ctrl_devs}"
    }
    if (defined(invoker.clock_ctrl_dirmap)) {
        extra_defines += " -DV_CLOCK_CTRL_DIRMAP=${invoker.clock_ctrl_dirmap}"
    }

    # pin controller virtual devices
    if (defined(invoker.iomux_base)
    &&  defined(invoker.iomux_size)
    &&  defined(invoker.iomux_devs))
    {
        extra_defines += " -DV_IOMUX_BASE=${invoker.iomux_base}"
        extra_defines += " -DV_IOMUX_SIZE=${invoker.iomux_size}"
        extra_defines += " -DV_IOMUX_DEVS=${invoker.iomux_devs}"
    }
    if (defined(invoker.iomux_dirmap)) {
        extra_defines += " -DV_IOMUX_DIRMAP=${invoker.iomux_dirmap}"
    }

    if (defined(invoker.external_mediator_include))
    {
        extra_defines += " -DEXTERNAL_MEDIATOR_INCLUDE=${invoker.external_mediator_include}"
    }

    toolchain_args = {
      plat_boot_flow = invoker.boot_flow
      plat_console = invoker.console
      plat_iommu = invoker.iommu

      plat_proprietary = ""
      plat_proprietary_unit = ""
      plat_proprietary_inc = ""

      if (defined(invoker.proprietary) && invoker.proprietary != "") {
        plat_proprietary_unit = "${invoker.proprietary}:unit_tests"
        plat_proprietary = "${invoker.proprietary}:proprietary"
        plat_proprietary_inc = "${invoker.proprietary}/inc"
      }

      if (defined(invoker.stdout)) {
        stdout = invoker.stdout
      }
      if (defined(invoker.max_image_size)) {
        plat_max_image_size = invoker.max_image_size
      }
      forward_variables_from(invoker.toolchain_args, "*")
    }
  }
}

template("aarch64_toolchain") {
  aarch64_common_toolchain("${target_name}") {
    forward_variables_from(invoker, "*")
    target = "aarch64-none-eabi"
    tool_prefix = "aarch64-linux-gnu-"  # TODO: this isn't right for bare metal but it works.
    platform_name = target_name
  }
}

template("aarch64_toolchains") {
  aarch64_toolchain("${target_name}") {
    forward_variables_from(invoker, "*")
    cpu = "${invoker.cpu}+nofp"

    # Add a macro so files can tell whether they are not being built for a VM.
    extra_defines = " -DVM_TOOLCHAIN=0"

    if (defined(invoker.branch_protection)) {
      extra_cflags = " -mbranch-protection=${invoker.branch_protection}"
      extra_defines += " -DBRANCH_PROTECTION=1"
    }
  }

  # Toolchain for building test VMs which run under Hafnium.
  aarch64_toolchain("${target_name}_vm") {
    forward_variables_from(invoker,
                           [
                             "origin_address",
                             "phys_start_addr",
                             "phys_mem_size",
                             "gic_version",
                             "gic_start",
                             "gic_end",
                             "gicd_base_address",
                             "gicd_size",
                             "gicr_base_address",
                             "gicr_size",
                             "gicc_base_address",
                             "gicc_size",
                             "gich_base_address",
                             "gich_size",
                             "gicv_base_address",
                             "gicv_size",
                             "gits_base_address",
                             "gits_size",
                             "uart_base_address",
                             "toolchain_args",
                             "console",
                             "proprietary"
                           ])
    cpu = "${invoker.cpu}+fp"
    boot_flow = "//src/arch/fake:boot_flow"
    iommu = "//src/iommu:absent"
    stdout = "//src/arch/aarch64/hftest:stdout"

    # Nonsense values because they are required but shouldn't be used.
    heap_pages = 0

    # Add a macro so files can tell whether they are being built for a VM.
    extra_defines = " -DVM_TOOLCHAIN=1"
  }
}
